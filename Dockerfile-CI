ARG BASE_IMAGE=alpine:3.21
FROM ${BASE_IMAGE}

LABEL org.opencontainers.image.authors="Chris Romp NZ6F"
LABEL org.opencontainers.image.description="HamClock by WBÃ˜OEW in a Docker container"
LABEL org.opencontainers.image.source="https://github.com/ChrisRomp/hamclock-docker"

# HamClock supported resolutions are 800x480, 1600x960, 2400x1440 and 3200x1920 as of v3.02
ARG HAMCLOCK_RESOLUTION=1600x960

# Install updates and required packages
RUN apk update && apk upgrade
RUN apk add curl make g++ libx11-dev perl linux-headers

RUN mkdir /hamclock
WORKDIR /hamclock

# COPY HamClock source from artifact downloaded by CI
COPY ESPHamClock.zip /hamclock/

# Sort-of following Desktop build steps from https://www.clearskyinstitute.com/ham/HamClock/
RUN unzip ESPHamClock.zip
WORKDIR /hamclock/ESPHamClock

# Change optimization level to -O2
# Fixes build failure on ARM64
RUN chmod 664 Makefile
RUN ls -alh Makefile

# Build for the target architecture with conservative flags to avoid illegal instruction errors
# Remove -march=native and add conservative flags for QEMU compatibility
# Use Docker's automatic platform arguments
ARG TARGETPLATFORM
ARG TARGETOS
ARG TARGETARCH
ARG TARGETVARIANT

# Debug: show what platform we're building for
RUN echo "Building for platform: $TARGETPLATFORM"
RUN echo "Target OS: $TARGETOS, Target Arch: $TARGETARCH, Target Variant: $TARGETVARIANT"
RUN sed -i 's/-march=native//g' Makefile && \
    sed -i 's/-O3/-O2/g' Makefile && \
    echo "Patching brightness.cpp to avoid system calls in _WEB_ONLY builds..." && \
    sed -i '/static void setDisplayBrightness(bool log)/a\\n#ifdef _WEB_ONLY\n    // Web-only builds do not need display brightness control\n    return;\n#endif\n' brightness.cpp && \
    case "$TARGETARCH" in \
        "arm64") \
            # Use very conservative ARM64 flags to avoid illegal instruction crashes
            echo "Building for ARM64 with very conservative flags" && \
            sed -i 's/std=c++17/std=c++17 -fno-aggressive-loop-optimizations -fno-tree-vectorize -fno-inline-functions -fno-omit-frame-pointer -mno-outline-atomics/' Makefile && \
            sed -i 's/-O2/-O1/' Makefile ;; \
        "arm") \
            # Use very conservative ARMv7 flags - disable advanced features that may not be available
            echo "Building for ARMv7 with very conservative flags" && \
            sed -i 's/std=c++17/std=c++17 -fno-aggressive-loop-optimizations -fno-tree-vectorize -fno-inline-functions -fno-omit-frame-pointer -mno-unaligned-access/' Makefile && \
            sed -i 's/-O2/-O1/' Makefile ;; \
        *) \
            # For x64/amd64, use the original working approach - no extra flags
            echo "Building for x64/amd64 with standard flags" ;; \
    esac && \
    echo "Building for TARGETARCH: $TARGETARCH" && \
    echo "Verifying _WEB_ONLY will be defined..." && \
    grep -n "_WEB_ONLY" Makefile && \
    make -j4 hamclock-web-${HAMCLOCK_RESOLUTION} FB_DEPTH=32 WIFI_NEVER=1
RUN make install

USER root

# HamClock REST API
EXPOSE 8080/tcp
# HamClock Web UI
EXPOSE 8081/tcp

# Persist HamClock settings outside of container
VOLUME /root/.hamclock

# Healtheck - call REST API, give it 2 mins to get through setup
HEALTHCHECK --interval=30s --timeout=10s --start-period=2m --retries=3 CMD curl -f http://localhost:8080/get_sys.txt || exit 1

# Start HamClock
WORKDIR /hamclock/ESPHamClock
CMD ["/usr/local/bin/hamclock", "-o"]
